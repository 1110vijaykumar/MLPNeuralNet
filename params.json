{"name":"MLPNeuralNet","tagline":"Fast multilayer perceptron neural network library for iOS and Mac OS X","body":"[![Build Status](https://travis-ci.org/nikolaypavlov/MLPNeuralNet.png?branch=master)](https://travis-ci.org/nikolaypavlov/MLPNeuralNet.png?branch=master)\r\n# MLPNeuralNet\r\n\r\nFast [multilayer perceptron](http://en.wikipedia.org/wiki/Multilayer_perceptron) neural network library for iOS and Mac OS X. It is built on top of the [Apple's Accelerate Framework](https://developer.apple.com/library/ios/documentation/Accelerate/Reference/AccelerateFWRef/_index.html), using vectorized operations and hardware acceleration if available.\r\n\r\n## Why to choose it?\r\nImagine that you created a prediction model in Matlab (Python or R) and want to use it in iOS app. If that's the case, MLPNeuralNet is exactly what you need. It is specifically designed to load and run models in [forward propagation](http://en.wikipedia.org/wiki/Backpropagation#Phase_1:_Propagation) mode only.\r\n\r\n### Features:\r\n- [classification](http://en.wikipedia.org/wiki/Binary_classification), [multiclass classification](http://en.wikipedia.org/wiki/Multiclass_classification) and regression output;\r\n- vectorized implementaion;\r\n- works with double precision;\r\n- multiple hidden layers or none (in that case it's same as logistic/linear regression)\r\n\r\n## Quick Example\r\nLet's deploy a model for the AND function ([conjunction](http://en.wikipedia.org/wiki/Logical_conjunction)) that works as follows: \r\n\r\n|X1 |X2 | Y |\r\n|:-:|:-:|:-:|\r\n| 0 | 0 | 0 |\r\n| 1 | 0 | 0 |\r\n| 0 | 1 | 0 |\r\n| 1 | 1 | 1 |\r\n\r\nOur model has the following weights and network configuration:\r\n\r\n\r\n```objectivec\r\n\r\n// Use designated initializer to pass configuration and weights to the model\r\nMLPNeuralNet *model = [[MLPNeuralNet alloc] initWithLayerConfig:@[@2, @1] \r\n                                                        weights:@[@-30, @20, @20] \r\n                                                     outputMode:MLPClassification];\r\n\r\n// Predict output of the model for data sample\r\ndouble sample[] = {0, 1};\r\nvector = [NSData dataWithBytes:sample length:sizeof(sample)];\r\nprediction = [NSMutableData dataWithLength:sizeof(double)];\r\n[model predictByFeatureVector:vector intoPredictionVector:prediction];\r\n\r\ndouble assessment = (double *)prediction.bytes;\r\nNSLog(@\"Model assessment is %f\", assessment[0]);\r\n\r\n```\r\n\r\n## Unit Tests\r\nMLPNeuralNet includes a suite of unit tests in the MLPNeuralNetTests subdirectory. You can execute them via the \"MLPNeuralNet\" scheme within Xcode.\r\n\r\n## Credits\r\nMLPNeuralNet implementation was inspired by [Andrew Ng's Machine Learning course](https://www.coursera.org/course/ml) on Coursera.\r\nArtificial Neural Net image was taken from [Wikipedia Commons](http://en.wikipedia.org/wiki/File:Artificial_neural_network.svg)\r\n\r\n## Contact\r\n\r\nMaintainer: [Mykola Pavlov](http://github.com/nikolaypavlov/) (me@nikolaypavlov.com)\r\n\r\n## License\r\nMLPNeuralNet is available under the BSD license. See the LICENSE file for more info.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}